function freezeObject(object) {
	const seen = new WeakSet();

	function recursiveFreeze(object) {
		if (seen.has(object) || object == null || typeof object !== "object") return object; // avoid circular references
		seen.add(object);
		for (const value of Object.values(object)) recursiveFreeze(value);
		return Object.freeze(object);
	};

	return recursiveFreeze(object)
};

const LuauOpcode = freezeObject({
	LOP_NOP: { Index: 0, Name: "NOP", HasAux: false },
	LOP_BREAK: { Index: 1, Name: "BREAK", HasAux: false },
	LOP_LOADNIL: { Index: 2, Name: "LOADNIL", HasAux: false },
	LOP_LOADB: { Index: 3, Name: "LOADB", HasAux: false },
	LOP_LOADN: { Index: 4, Name: "LOADN", HasAux: false },
	LOP_LOADK: { Index: 5, Name: "LOADK", HasAux: false },
	LOP_MOVE: { Index: 6, Name: "MOVE", HasAux: false },
	LOP_GETGLOBAL: { Index: 7, Name: "GETGLOBAL", HasAux: true },
	LOP_SETGLOBAL: { Index: 8, Name: "SETGLOBAL", HasAux: true },
	LOP_GETUPVAL: { Index: 9, Name: "GETUPVAL", HasAux: false },
	LOP_SETUPVAL: { Index: 10, Name: "SETUPVAL", HasAux: false },
	LOP_CLOSEUPVALS: { Index: 11, Name: "CLOSEUPVALS", HasAux: false },
	LOP_GETIMPORT: { Index: 12, Name: "GETIMPORT", HasAux: true },
	LOP_GETTABLE: { Index: 13, Name: "GETTABLE", HasAux: false },
	LOP_SETTABLE: { Index: 14, Name: "SETTABLE", HasAux: false },
	LOP_GETTABLEKS: { Index: 15, Name: "GETTABLEKS", HasAux: true },
	LOP_SETTABLEKS: { Index: 16, Name: "SETTABLEKS", HasAux: true },
	LOP_GETTABLEN: { Index: 17, Name: "GETTABLEN", HasAux: false },
	LOP_SETTABLEN: { Index: 18, Name: "SETTABLEN", HasAux: false },
	LOP_NEWCLOSURE: { Index: 19, Name: "NEWCLOSURE", HasAux: false },
	LOP_NAMECALL: { Index: 20, Name: "NAMECALL", HasAux: true },
	LOP_CALL: { Index: 21, Name: "CALL", HasAux: false },
	LOP_RETURN: { Index: 22, Name: "RETURN", HasAux: false },
	LOP_JUMP: { Index: 23, Name: "JUMP", HasAux: false },
	LOP_JUMPBACK: { Index: 24, Name: "JUMPBACK", HasAux: false },
	LOP_JUMPIF: { Index: 25, Name: "JUMPIF", HasAux: false },
	LOP_JUMPIFNOT: { Index: 26, Name: "JUMPIFNOT", HasAux: false },
	LOP_JUMPIFEQ: { Index: 27, Name: "JUMPIFEQ", HasAux: true },
	LOP_JUMPIFLE: { Index: 28, Name: "JUMPIFLE", HasAux: true },
	LOP_JUMPIFLT: { Index: 29, Name: "JUMPIFLT", HasAux: true },
	LOP_JUMPIFNOTEQ: { Index: 30, Name: "JUMPIFNOTEQ", HasAux: true },
	LOP_JUMPIFNOTLE: { Index: 31, Name: "JUMPIFNOTLE", HasAux: true },
	LOP_JUMPIFNOTLT: { Index: 32, Name: "JUMPIFNOTLT", HasAux: true },
	LOP_ADD: { Index: 33, Name: "ADD", HasAux: false },
	LOP_SUB: { Index: 34, Name: "SUB", HasAux: false },
	LOP_MUL: { Index: 35, Name: "MUL", HasAux: false },
	LOP_DIV: { Index: 36, Name: "DIV", HasAux: false },
	LOP_MOD: { Index: 37, Name: "MOD", HasAux: false },
	LOP_POW: { Index: 38, Name: "POW", HasAux: false },
	LOP_ADDK: { Index: 39, Name: "ADDK", HasAux: false },
	LOP_SUBK: { Index: 40, Name: "SUBK", HasAux: false },
	LOP_MULK: { Index: 41, Name: "MULK", HasAux: false },
	LOP_DIVK: { Index: 42, Name: "DIVK", HasAux: false },
	LOP_MODK: { Index: 43, Name: "MODK", HasAux: false },
	LOP_POWK: { Index: 44, Name: "POWK", HasAux: false },
	LOP_AND: { Index: 45, Name: "AND", HasAux: false },
	LOP_OR: { Index: 46, Name: "OR", HasAux: false },
	LOP_ANDK: { Index: 47, Name: "ANDK", HasAux: false },
	LOP_ORK: { Index: 48, Name: "ORK", HasAux: false },
	LOP_CONCAT: { Index: 49, Name: "CONCAT", HasAux: false },
	LOP_NOT: { Index: 50, Name: "NOT", HasAux: false },
	LOP_MINUS: { Index: 51, Name: "MINUS", HasAux: false },
	LOP_LENGTH: { Index: 52, Name: "LENGTH", HasAux: false },
	LOP_NEWTABLE: { Index: 53, Name: "NEWTABLE", HasAux: true },
	LOP_DUPTABLE: { Index: 54, Name: "DUPTABLE", HasAux: false },
	LOP_SETLIST: { Index: 55, Name: "SETLIST", HasAux: true },
	LOP_FORNPREP: { Index: 56, Name: "FORNPREP", HasAux: false },
	LOP_FORNLOOP: { Index: 57, Name: "FORNLOOP", HasAux: false },
	LOP_FORGLOOP: { Index: 58, Name: "FORGLOOP", HasAux: true },
	LOP_FORGPREP_INEXT: { Index: 59, Name: "FORGPREP_INEXT", HasAux: false },
	LOP_FASTCALL3: { Index: 60, Name: "FASTCALL3", HasAux: true },
	LOP_FORGPREP_NEXT: { Index: 61, Name: "FORGPREP_NEXT", HasAux: false },
	LOP_NATIVECALL: { Index: 62, Name: "NATIVECALL", HasAux: false },
	LOP_GETVARARGS: { Index: 63, Name: "GETVARARGS", HasAux: false },
	LOP_DUPCLOSURE: { Index: 64, Name: "DUPCLOSURE", HasAux: false },
	LOP_PREPVARARGS: { Index: 65, Name: "PREPVARARGS", HasAux: false },
	LOP_LOADKX: { Index: 66, Name: "LOADKX", HasAux: true },
	LOP_JUMPX: { Index: 67, Name: "JUMPX", HasAux: false },
	LOP_FASTCALL: { Index: 68, Name: "FASTCALL", HasAux: false },
	LOP_COVERAGE: { Index: 69, Name: "COVERAGE", HasAux: false },
	LOP_CAPTURE: { Index: 70, Name: "CAPTURE", HasAux: false },
	LOP_SUBRK: { Index: 71, Name: "SUBRK", HasAux: false },
	LOP_DIVRK: { Index: 72, Name: "DIVRK", HasAux: false },
	LOP_FASTCALL1: { Index: 73, Name: "FASTCALL1", HasAux: false },
	LOP_FASTCALL2: { Index: 74, Name: "FASTCALL2", HasAux: true },
	LOP_FASTCALL2K: { Index: 75, Name: "FASTCALL2K", HasAux: true },
	LOP_FORGPREP: { Index: 76, Name: "FORGPREP", HasAux: false },
	LOP_JUMPXEQKNIL: { Index: 77, Name: "JUMPXEQKNIL", HasAux: true },
	LOP_JUMPXEQKB: { Index: 78, Name: "JUMPXEQKB", HasAux: true },
	LOP_JUMPXEQKN: { Index: 79, Name: "JUMPXEQKN", HasAux: true },
	LOP_JUMPXEQKS: { Index: 80, Name: "JUMPXEQKS", HasAux: true },
	LOP_IDIV: { Index: 81, Name: "IDIV", HasAux: false },
	LOP_IDIVK: { Index: 82, Name: "IDIVK", HasAux: false },
	LOP__COUNT: { Index: 83, Name: "_COUNT", HasAux: false }
});

const LuauBytecodeTag = freezeObject({
	LBC_VERSION_MIN: 3,
	LBC_VERSION_MAX: 6,
	LBC_TYPE_VERSION_MIN: 1,
	LBC_TYPE_VERSION_MAX: 3
});

const LuauBytecodeConstants = freezeObject({
	LBC_CONSTANT_NIL: 0,
	LBC_CONSTANT_BOOLEAN: 1,
	LBC_CONSTANT_NUMBER: 2,
	LBC_CONSTANT_STRING: 3,
	LBC_CONSTANT_IMPORT: 4,
	LBC_CONSTANT_TABLE: 5,
	LBC_CONSTANT_CLOSURE: 6,
	LBC_CONSTANT_VECTOR: 7
});

const LuauBytecodeType = freezeObject({
	LBC_TYPE_NIL: 0,
	LBC_TYPE_BOOLEAN: 1,
	LBC_TYPE_NUMBER: 2,
	LBC_TYPE_STRING: 3,
	LBC_TYPE_TABLE: 4,
	LBC_TYPE_FUNCTION: 5,
	LBC_TYPE_THREAD: 6,
	LBC_TYPE_USERDATA: 7,
	LBC_TYPE_VECTOR: 8,
	LBC_TYPE_BUFFER: 9,
	LBC_TYPE_ANY: 15,
	LBC_TYPE_TAGGED_USERDATA_BASE: 64,
	LBC_TYPE_TAGGED_USERDATA_END: 64 + 32,
	LBC_TYPE_OPTIONAL_BIT: 1 << 7,
	LBC_TYPE_INVALID: 256
});

const LuauBuiltinFunction = freezeObject({
	LBF_NONE: 0,
	LBF_ASSERT: 1,
	LBF_MATH_ABS: 2,
	LBF_MATH_ACOS: 3,
	LBF_MATH_ASIN: 4,
	LBF_MATH_ATAN2: 5,
	LBF_MATH_ATAN: 6,
	LBF_MATH_CEIL: 7,
	LBF_MATH_COSH: 8,
	LBF_MATH_COS: 9,
	LBF_MATH_DEG: 10,
	LBF_MATH_EXP: 11,
	LBF_MATH_FLOOR: 12,
	LBF_MATH_FMOD: 13,
	LBF_MATH_FREXP: 14,
	LBF_MATH_LDEXP: 15,
	LBF_MATH_LOG10: 16,
	LBF_MATH_LOG: 17,
	LBF_MATH_MAX: 18,
	LBF_MATH_MIN: 19,
	LBF_MATH_MODF: 20,
	LBF_MATH_POW: 21,
	LBF_MATH_RAD: 22,
	LBF_MATH_SINH: 23,
	LBF_MATH_SIN: 24,
	LBF_MATH_SQRT: 25,
	LBF_MATH_TANH: 26,
	LBF_MATH_TAN: 27,
	LBF_BIT32_ARSHIFT: 28,
	LBF_BIT32_BAND: 29,
	LBF_BIT32_BNOT: 30,
	LBF_BIT32_BOR: 31,
	LBF_BIT32_BXOR: 32,
	LBF_BIT32_BTEST: 33,
	LBF_BIT32_EXTRACT: 34,
	LBF_BIT32_LROTATE: 35,
	LBF_BIT32_LSHIFT: 36,
	LBF_BIT32_REPLACE: 37,
	LBF_BIT32_RROTATE: 38,
	LBF_BIT32_RSHIFT: 39,
	LBF_TYPE: 40,
	LBF_STRING_BYTE: 41,
	LBF_STRING_CHAR: 42,
	LBF_STRING_LEN: 43,
	LBF_TYPEOF: 44,
	LBF_STRING_SUB: 45,
	LBF_MATH_CLAMP: 46,
	LBF_MATH_SIGN: 47,
	LBF_MATH_ROUND: 48,
	LBF_RAWSET: 49,
	LBF_RAWGET: 50,
	LBF_RAWEQUAL: 51,
	LBF_TABLE_INSERT: 52,
	LBF_TABLE_UNPACK: 53,
	LBF_VECTOR: 54,
	LBF_BIT32_COUNTLZ: 55,
	LBF_BIT32_COUNTRZ: 56,
	LBF_SELECT_VARARG: 57,
	LBF_RAWLEN: 58,
	LBF_BIT32_EXTRACTK: 59,
	LBF_GETMETATABLE: 60,
	LBF_SETMETATABLE: 61,
	LBF_TONUMBER: 62,
	LBF_TOSTRING: 63,
	LBF_BIT32_BYTESWAP: 64,
	LBF_BUFFER_READI8: 65,
	LBF_BUFFER_READU8: 66,
	LBF_BUFFER_WRITEU8: 67,
	LBF_BUFFER_READI16: 68,
	LBF_BUFFER_READU16: 69,
	LBF_BUFFER_WRITEU16: 70,
	LBF_BUFFER_READI32: 71,
	LBF_BUFFER_READU32: 72,
	LBF_BUFFER_WRITEU32: 73,
	LBF_BUFFER_READF32: 74,
	LBF_BUFFER_WRITEF32: 75,
	LBF_BUFFER_READF64: 76,
	LBF_BUFFER_WRITEF64: 77,
	LBF_VECTOR_MAGNITUDE: 78,
	LBF_VECTOR_NORMALIZE: 79,
	LBF_VECTOR_CROSS: 80,
	LBF_VECTOR_DOT: 81,
	LBF_VECTOR_FLOOR: 82,
	LBF_VECTOR_CEIL: 83,
	LBF_VECTOR_ABS: 84,
	LBF_VECTOR_SIGN: 85,
	LBF_VECTOR_CLAMP: 86,
	LBF_VECTOR_MIN: 87,
	LBF_VECTOR_MAX: 88,
	LBF_MATH_LERP: 89
});

const LuauCaptureType = freezeObject({
	LCT_VAL: 0,
	LCT_REF: 2,
	LCT_UPVAL: 3
});

const LuauProtoFlag = freezeObject({
	LPF_NATIVE_MODULE: 1 << 0,
	LPF_NATIVE_COLD: 1 << 1,
	LPF_NATIVE_FUNCTION: 1 << 2
});

export {
	LuauOpcode,
	LuauBytecodeTag,
	LuauBytecodeConstants,
	LuauBytecodeType,
	LuauBuiltinFunction,
	LuauCaptureType,
	LuauProtoFlag
};
